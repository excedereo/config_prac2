import subprocess
import sys
import json
from graphviz import Digraph
import os
import matplotlib.pyplot as plt
import networkx as nx


def setup_graphviz_path():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Graphviz"""
    graphviz_paths = [
        r"C:\Program Files\Graphviz\bin",
        r"C:\Program Files (x86)\Graphviz\bin",
        r"C:\Graphviz\bin"
    ]

    for path in graphviz_paths:
        if os.path.exists(path):
            os.environ["PATH"] += os.pathsep + path
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ Graphviz: {path}")
            return True
    return False


def create_matplotlib_networkx():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ matplotlib —Å –ø–æ–º–æ—â—å—é NetworkX"""
    G = nx.DiGraph()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç
    G.add_node('matplotlib', color='lightcoral', size=3000)

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = ['numpy', 'pillow', 'cycler', 'kiwisolver', 'pyparsing',
            'python-dateutil', 'contourpy', 'fonttools', 'packaging']

    for dep in deps:
        G.add_node(dep, color='lightblue', size=2000)
        G.add_edge('matplotlib', dep)

    # –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    G.add_node('six', color='lightgreen', size=1500)
    G.add_edge('python-dateutil', 'six')

    return G


def create_express_networkx():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ express —Å –ø–æ–º–æ—â—å—é NetworkX"""
    G = nx.DiGraph()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç
    G.add_node('express', color='coral', size=3000)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Express
    express_deps = ['body-parser', 'cookie', 'debug', 'accepts', 'path-to-regexp',
                    'qs', 'send', 'serve-static', 'finalhandler', 'http-errors']

    for dep in express_deps:
        G.add_node(dep, color='lightgreen', size=2000)
        G.add_edge('express', dep)

    return G


def draw_dependencies():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    plt.figure(figsize=(20, 10))

    # –ì—Ä–∞—Ñ matplotlib
    plt.subplot(1, 2, 1)
    G_matplotlib = create_matplotlib_networkx()

    pos = nx.spring_layout(G_matplotlib, k=2, iterations=50)
    colors = [G_matplotlib.nodes[node].get('color', 'lightblue') for node in G_matplotlib.nodes()]
    sizes = [G_matplotlib.nodes[node].get('size', 1500) for node in G_matplotlib.nodes()]

    nx.draw(G_matplotlib, pos, with_labels=True, node_color=colors,
            node_size=sizes, font_size=8, font_weight='bold',
            arrows=True, arrowsize=20, edge_color='gray')

    plt.title('Matplotlib Dependencies\n(Python Package)', fontsize=14, fontweight='bold')

    # –ì—Ä–∞—Ñ express
    plt.subplot(1, 2, 2)
    G_express = create_express_networkx()

    pos_express = nx.spring_layout(G_express, k=2, iterations=50)
    colors_express = [G_express.nodes[node].get('color', 'lightgreen') for node in G_express.nodes()]
    sizes_express = [G_express.nodes[node].get('size', 1500) for node in G_express.nodes()]

    nx.draw(G_express, pos_express, with_labels=True, node_color=colors_express,
            node_size=sizes_express, font_size=8, font_weight='bold',
            arrows=True, arrowsize=20, edge_color='gray')

    plt.title('Express Dependencies\n(JavaScript Package)', fontsize=14, fontweight='bold')

    plt.tight_layout()
    plt.savefig('dependencies_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()


def create_detailed_matplotlib_graph():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π matplotlib"""
    dot = Digraph(comment='Matplotlib Dependencies')
    dot.attr(rankdir='TB')

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç
    dot.node('matplotlib', 'matplotlib', style='filled', fillcolor='lightcoral', shape='ellipse')

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    main_deps = {
        'numpy': '–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
        'pillow': '–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
        'cycler': '–¶–∏–∫–ª—ã —Å—Ç–∏–ª–µ–π',
        'kiwisolver': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è layout',
        'pyparsing': '–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏–π',
        'python-dateutil': '–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏',
        'contourpy': '–ö–æ–Ω—Ç—É—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏',
        'fonttools': '–†–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏',
        'packaging': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏'
    }

    for dep, description in main_deps.items():
        dot.node(dep, f'{dep}\n{description}', style='filled', fillcolor='lightblue')
        dot.edge('matplotlib', dep)

    # –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dot.node('six', 'six\nPython 2/3 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', style='filled', fillcolor='lightgreen')
    dot.edge('python-dateutil', 'six')

    return dot


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Graphviz
    if setup_graphviz_path():
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ —á–µ—Ä–µ–∑ Graphviz
            print("\n1. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ —á–µ—Ä–µ–∑ Graphviz...")
            matplotlib_graph = create_detailed_matplotlib_graph()
            matplotlib_graph.render('matplotlib_detailed', format='png', cleanup=True)
            print("‚úì –î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ matplotlib —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Graphviz")
        except Exception as e:
            print(f"Graphviz –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —á–µ—Ä–µ–∑ NetworkX/Matplotlib
    print("\n2. –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —á–µ—Ä–µ–∑ NetworkX/Matplotlib...")
    draw_dependencies()
    print("‚úì –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'dependencies_comparison.png'")

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    print("\n" + "=" * 50)
    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–•")
    print("=" * 50)

    print("\nüìä MATPLOTLIB (Python):")
    matplotlib_deps = ['numpy', 'pillow', 'cycler', 'kiwisolver', 'pyparsing',
                       'python-dateutil', 'contourpy', 'fonttools', 'packaging']
    for dep in matplotlib_deps:
        print(f"  ‚Ä¢ {dep}")

    print("\nüåê EXPRESS (JavaScript):")
    express_deps = ['body-parser', 'cookie', 'debug', 'accepts', 'path-to-regexp',
                    'qs', 'send', 'serve-static', 'finalhandler', 'http-errors']
    for dep in express_deps:
        print(f"  ‚Ä¢ {dep}")


if __name__ == "__main__":
    main()